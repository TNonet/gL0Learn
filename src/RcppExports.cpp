// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// test_Oracle_prox
SEXP test_Oracle_prox(const SEXP& theta, const SEXP& l0, const SEXP& l1, const SEXP& l2, const SEXP& lows, const SEXP& highs);
RcppExport SEXP _gL0Learn_test_Oracle_prox(SEXP thetaSEXP, SEXP l0SEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP lowsSEXP, SEXP highsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type lows(lowsSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type highs(highsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Oracle_prox(theta, l0, l1, l2, lows, highs));
    return rcpp_result_gen;
END_RCPP
}
// is_sympd
bool is_sympd(const arma::mat& x);
RcppExport SEXP _gL0Learn_is_sympd(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(is_sympd(x));
    return rcpp_result_gen;
END_RCPP
}
// gL0Learn_fit_R
Rcpp::List gL0Learn_fit_R(const arma::mat& Y, const arma::mat& theta_init, const SEXP l0, const SEXP l1, const SEXP l2, const std::string algorithm, const SEXP lows, const SEXP highs, const double atol, const double rtol, const size_t max_iter);
RcppExport SEXP _gL0Learn_gL0Learn_fit_R(SEXP YSEXP, SEXP theta_initSEXP, SEXP l0SEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP algorithmSEXP, SEXP lowsSEXP, SEXP highsSEXP, SEXP atolSEXP, SEXP rtolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const SEXP >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< const SEXP >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type lows(lowsSEXP);
    Rcpp::traits::input_parameter< const SEXP >::type highs(highsSEXP);
    Rcpp::traits::input_parameter< const double >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< const double >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< const size_t >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(gL0Learn_fit_R(Y, theta_init, l0, l1, l2, algorithm, lows, highs, atol, rtol, max_iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gL0Learn_test_Oracle_prox", (DL_FUNC) &_gL0Learn_test_Oracle_prox, 6},
    {"_gL0Learn_is_sympd", (DL_FUNC) &_gL0Learn_is_sympd, 1},
    {"_gL0Learn_gL0Learn_fit_R", (DL_FUNC) &_gL0Learn_gL0Learn_fit_R, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_gL0Learn(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
