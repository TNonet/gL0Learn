// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// test_OracleScalarL0L2NoBounds_prox_double
double test_OracleScalarL0L2NoBounds_prox_double(const double theta, const double l0, const double l2);
RcppExport SEXP _gL0Learn_test_OracleScalarL0L2NoBounds_prox_double(SEXP thetaSEXP, SEXP l0SEXP, SEXP l2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const double >::type l2(l2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleScalarL0L2NoBounds_prox_double(theta, l0, l2));
    return rcpp_result_gen;
END_RCPP
}
// test_OracleScalarL0L2NoBounds_prox_vec
arma::vec test_OracleScalarL0L2NoBounds_prox_vec(const arma::vec theta, const double l0, const double l2);
RcppExport SEXP _gL0Learn_test_OracleScalarL0L2NoBounds_prox_vec(SEXP thetaSEXP, SEXP l0SEXP, SEXP l2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const double >::type l2(l2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleScalarL0L2NoBounds_prox_vec(theta, l0, l2));
    return rcpp_result_gen;
END_RCPP
}
// test_OracleVectorL0L2NoBounds_prox_vec
arma::vec test_OracleVectorL0L2NoBounds_prox_vec(const arma::vec theta, const arma::vec l0, const arma::vec l2);
RcppExport SEXP _gL0Learn_test_OracleVectorL0L2NoBounds_prox_vec(SEXP thetaSEXP, SEXP l0SEXP, SEXP l2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type l2(l2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleVectorL0L2NoBounds_prox_vec(theta, l0, l2));
    return rcpp_result_gen;
END_RCPP
}
// test_OracleScalarL0L1L2NoBounds_prox_double
double test_OracleScalarL0L1L2NoBounds_prox_double(const double theta, const double l0, const double l1, const double l2);
RcppExport SEXP _gL0Learn_test_OracleScalarL0L1L2NoBounds_prox_double(SEXP thetaSEXP, SEXP l0SEXP, SEXP l1SEXP, SEXP l2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< const double >::type l2(l2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleScalarL0L1L2NoBounds_prox_double(theta, l0, l1, l2));
    return rcpp_result_gen;
END_RCPP
}
// test_OracleScalarL0L1L2NoBounds_prox_vec
arma::vec test_OracleScalarL0L1L2NoBounds_prox_vec(const arma::vec theta, const double l0, const double l1, const double l2);
RcppExport SEXP _gL0Learn_test_OracleScalarL0L1L2NoBounds_prox_vec(SEXP thetaSEXP, SEXP l0SEXP, SEXP l1SEXP, SEXP l2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< const double >::type l2(l2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleScalarL0L1L2NoBounds_prox_vec(theta, l0, l1, l2));
    return rcpp_result_gen;
END_RCPP
}
// test_OracleVectorL0L1L2NoBounds_prox_vec
arma::vec test_OracleVectorL0L1L2NoBounds_prox_vec(const arma::vec theta, const arma::vec l0, const arma::vec l1, const arma::vec l2);
RcppExport SEXP _gL0Learn_test_OracleVectorL0L1L2NoBounds_prox_vec(SEXP thetaSEXP, SEXP l0SEXP, SEXP l1SEXP, SEXP l2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type l2(l2SEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleVectorL0L1L2NoBounds_prox_vec(theta, l0, l1, l2));
    return rcpp_result_gen;
END_RCPP
}
// test_OracleScalarL0L2ScalarBounds_prox_double
double test_OracleScalarL0L2ScalarBounds_prox_double(const double theta, const double l0, const double l2, const double lows, const double highs);
RcppExport SEXP _gL0Learn_test_OracleScalarL0L2ScalarBounds_prox_double(SEXP thetaSEXP, SEXP l0SEXP, SEXP l2SEXP, SEXP lowsSEXP, SEXP highsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const double >::type lows(lowsSEXP);
    Rcpp::traits::input_parameter< const double >::type highs(highsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleScalarL0L2ScalarBounds_prox_double(theta, l0, l2, lows, highs));
    return rcpp_result_gen;
END_RCPP
}
// test_OracleScalarL0L2ScalarBounds_prox_vec
arma::vec test_OracleScalarL0L2ScalarBounds_prox_vec(const arma::vec theta, const double l0, const double l2, const double lows, const double highs);
RcppExport SEXP _gL0Learn_test_OracleScalarL0L2ScalarBounds_prox_vec(SEXP thetaSEXP, SEXP l0SEXP, SEXP l2SEXP, SEXP lowsSEXP, SEXP highsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const double >::type lows(lowsSEXP);
    Rcpp::traits::input_parameter< const double >::type highs(highsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleScalarL0L2ScalarBounds_prox_vec(theta, l0, l2, lows, highs));
    return rcpp_result_gen;
END_RCPP
}
// test_OracleVectorL0L2ScalarBounds_prox_vec
arma::vec test_OracleVectorL0L2ScalarBounds_prox_vec(const arma::vec theta, const arma::vec l0, const arma::vec l2, const double lows, const double highs);
RcppExport SEXP _gL0Learn_test_OracleVectorL0L2ScalarBounds_prox_vec(SEXP thetaSEXP, SEXP l0SEXP, SEXP l2SEXP, SEXP lowsSEXP, SEXP highsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const double >::type lows(lowsSEXP);
    Rcpp::traits::input_parameter< const double >::type highs(highsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleVectorL0L2ScalarBounds_prox_vec(theta, l0, l2, lows, highs));
    return rcpp_result_gen;
END_RCPP
}
// test_OracleScalarL0L1L2ScalarBounds_prox_double
double test_OracleScalarL0L1L2ScalarBounds_prox_double(const double theta, const double l0, const double l1, const double l2, const double lows, const double highs);
RcppExport SEXP _gL0Learn_test_OracleScalarL0L1L2ScalarBounds_prox_double(SEXP thetaSEXP, SEXP l0SEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP lowsSEXP, SEXP highsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< const double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const double >::type lows(lowsSEXP);
    Rcpp::traits::input_parameter< const double >::type highs(highsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleScalarL0L1L2ScalarBounds_prox_double(theta, l0, l1, l2, lows, highs));
    return rcpp_result_gen;
END_RCPP
}
// test_OracleScalarL0L1L2ScalarBounds_prox_vec
arma::vec test_OracleScalarL0L1L2ScalarBounds_prox_vec(const arma::vec theta, const double l0, const double l1, const double l2, const double lows, const double highs);
RcppExport SEXP _gL0Learn_test_OracleScalarL0L1L2ScalarBounds_prox_vec(SEXP thetaSEXP, SEXP l0SEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP lowsSEXP, SEXP highsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< const double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const double >::type lows(lowsSEXP);
    Rcpp::traits::input_parameter< const double >::type highs(highsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleScalarL0L1L2ScalarBounds_prox_vec(theta, l0, l1, l2, lows, highs));
    return rcpp_result_gen;
END_RCPP
}
// test_OracleVectorL0L1L2ScalarBounds_prox_vec
arma::vec test_OracleVectorL0L1L2ScalarBounds_prox_vec(const arma::vec theta, const arma::vec l0, const arma::vec l1, const arma::vec l2, const double lows, const double highs);
RcppExport SEXP _gL0Learn_test_OracleVectorL0L1L2ScalarBounds_prox_vec(SEXP thetaSEXP, SEXP l0SEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP lowsSEXP, SEXP highsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const double >::type lows(lowsSEXP);
    Rcpp::traits::input_parameter< const double >::type highs(highsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleVectorL0L1L2ScalarBounds_prox_vec(theta, l0, l1, l2, lows, highs));
    return rcpp_result_gen;
END_RCPP
}
// test_OracleScalarL0L2VectorBounds_prox_vec
arma::vec test_OracleScalarL0L2VectorBounds_prox_vec(const arma::vec theta, const double l0, const double l2, const arma::vec lows, const arma::vec highs);
RcppExport SEXP _gL0Learn_test_OracleScalarL0L2VectorBounds_prox_vec(SEXP thetaSEXP, SEXP l0SEXP, SEXP l2SEXP, SEXP lowsSEXP, SEXP highsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type lows(lowsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type highs(highsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleScalarL0L2VectorBounds_prox_vec(theta, l0, l2, lows, highs));
    return rcpp_result_gen;
END_RCPP
}
// test_OracleVectorL0L2VectorBounds_prox_vec
arma::vec test_OracleVectorL0L2VectorBounds_prox_vec(const arma::vec theta, const arma::vec l0, const arma::vec l2, const arma::vec lows, const arma::vec highs);
RcppExport SEXP _gL0Learn_test_OracleVectorL0L2VectorBounds_prox_vec(SEXP thetaSEXP, SEXP l0SEXP, SEXP l2SEXP, SEXP lowsSEXP, SEXP highsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type lows(lowsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type highs(highsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleVectorL0L2VectorBounds_prox_vec(theta, l0, l2, lows, highs));
    return rcpp_result_gen;
END_RCPP
}
// test_OracleScalarL0L1L2VectorBounds_prox_vec
arma::vec test_OracleScalarL0L1L2VectorBounds_prox_vec(const arma::vec theta, const double l0, const double l1, const double l2, const arma::vec lows, const arma::vec highs);
RcppExport SEXP _gL0Learn_test_OracleScalarL0L1L2VectorBounds_prox_vec(SEXP thetaSEXP, SEXP l0SEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP lowsSEXP, SEXP highsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< const double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type lows(lowsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type highs(highsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleScalarL0L1L2VectorBounds_prox_vec(theta, l0, l1, l2, lows, highs));
    return rcpp_result_gen;
END_RCPP
}
// test_OracleVectorL0L1L2VectorBounds_prox_vec
arma::vec test_OracleVectorL0L1L2VectorBounds_prox_vec(const arma::vec theta, const arma::vec l0, const arma::vec l1, const arma::vec l2, const arma::vec lows, const arma::vec highs);
RcppExport SEXP _gL0Learn_test_OracleVectorL0L1L2VectorBounds_prox_vec(SEXP thetaSEXP, SEXP l0SEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP lowsSEXP, SEXP highsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type lows(lowsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type highs(highsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_OracleVectorL0L1L2VectorBounds_prox_vec(theta, l0, l1, l2, lows, highs));
    return rcpp_result_gen;
END_RCPP
}
// gL0Learn_fit
Rcpp::List gL0Learn_fit(const arma::mat& Y, arma::mat& theta_init, const double atol, const double rtol, const double l0, const double l1, const double l2, const size_t max_iter);
RcppExport SEXP _gL0Learn_gL0Learn_fit(SEXP YSEXP, SEXP theta_initSEXP, SEXP atolSEXP, SEXP rtolSEXP, SEXP l0SEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const double >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< const double >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< const double >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< const double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const size_t >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(gL0Learn_fit(Y, theta_init, atol, rtol, l0, l1, l2, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// gL0Learn_psifit
Rcpp::List gL0Learn_psifit(const arma::mat& Y, arma::mat& theta_init, const double atol, const double rtol, const double l0, const double l1, const double l2, const size_t max_iter);
RcppExport SEXP _gL0Learn_gL0Learn_psifit(SEXP YSEXP, SEXP theta_initSEXP, SEXP atolSEXP, SEXP rtolSEXP, SEXP l0SEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type theta_init(theta_initSEXP);
    Rcpp::traits::input_parameter< const double >::type atol(atolSEXP);
    Rcpp::traits::input_parameter< const double >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< const double >::type l0(l0SEXP);
    Rcpp::traits::input_parameter< const double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< const double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< const size_t >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(gL0Learn_psifit(Y, theta_init, atol, rtol, l0, l1, l2, max_iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gL0Learn_test_OracleScalarL0L2NoBounds_prox_double", (DL_FUNC) &_gL0Learn_test_OracleScalarL0L2NoBounds_prox_double, 3},
    {"_gL0Learn_test_OracleScalarL0L2NoBounds_prox_vec", (DL_FUNC) &_gL0Learn_test_OracleScalarL0L2NoBounds_prox_vec, 3},
    {"_gL0Learn_test_OracleVectorL0L2NoBounds_prox_vec", (DL_FUNC) &_gL0Learn_test_OracleVectorL0L2NoBounds_prox_vec, 3},
    {"_gL0Learn_test_OracleScalarL0L1L2NoBounds_prox_double", (DL_FUNC) &_gL0Learn_test_OracleScalarL0L1L2NoBounds_prox_double, 4},
    {"_gL0Learn_test_OracleScalarL0L1L2NoBounds_prox_vec", (DL_FUNC) &_gL0Learn_test_OracleScalarL0L1L2NoBounds_prox_vec, 4},
    {"_gL0Learn_test_OracleVectorL0L1L2NoBounds_prox_vec", (DL_FUNC) &_gL0Learn_test_OracleVectorL0L1L2NoBounds_prox_vec, 4},
    {"_gL0Learn_test_OracleScalarL0L2ScalarBounds_prox_double", (DL_FUNC) &_gL0Learn_test_OracleScalarL0L2ScalarBounds_prox_double, 5},
    {"_gL0Learn_test_OracleScalarL0L2ScalarBounds_prox_vec", (DL_FUNC) &_gL0Learn_test_OracleScalarL0L2ScalarBounds_prox_vec, 5},
    {"_gL0Learn_test_OracleVectorL0L2ScalarBounds_prox_vec", (DL_FUNC) &_gL0Learn_test_OracleVectorL0L2ScalarBounds_prox_vec, 5},
    {"_gL0Learn_test_OracleScalarL0L1L2ScalarBounds_prox_double", (DL_FUNC) &_gL0Learn_test_OracleScalarL0L1L2ScalarBounds_prox_double, 6},
    {"_gL0Learn_test_OracleScalarL0L1L2ScalarBounds_prox_vec", (DL_FUNC) &_gL0Learn_test_OracleScalarL0L1L2ScalarBounds_prox_vec, 6},
    {"_gL0Learn_test_OracleVectorL0L1L2ScalarBounds_prox_vec", (DL_FUNC) &_gL0Learn_test_OracleVectorL0L1L2ScalarBounds_prox_vec, 6},
    {"_gL0Learn_test_OracleScalarL0L2VectorBounds_prox_vec", (DL_FUNC) &_gL0Learn_test_OracleScalarL0L2VectorBounds_prox_vec, 5},
    {"_gL0Learn_test_OracleVectorL0L2VectorBounds_prox_vec", (DL_FUNC) &_gL0Learn_test_OracleVectorL0L2VectorBounds_prox_vec, 5},
    {"_gL0Learn_test_OracleScalarL0L1L2VectorBounds_prox_vec", (DL_FUNC) &_gL0Learn_test_OracleScalarL0L1L2VectorBounds_prox_vec, 6},
    {"_gL0Learn_test_OracleVectorL0L1L2VectorBounds_prox_vec", (DL_FUNC) &_gL0Learn_test_OracleVectorL0L1L2VectorBounds_prox_vec, 6},
    {"_gL0Learn_gL0Learn_fit", (DL_FUNC) &_gL0Learn_gL0Learn_fit, 8},
    {"_gL0Learn_gL0Learn_psifit", (DL_FUNC) &_gL0Learn_gL0Learn_psifit, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_gL0Learn(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
